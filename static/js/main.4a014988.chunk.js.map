{"version":3,"sources":["utils/hooks.js","pages/SurveyForm.js","pages/Submitted.js","pages/Join.js","context/auth.js","pages/Admin.js","components/UserData.js","App.js","ApolloProvider.js","index.js"],"names":["useForm","callback","initialState","useState","value","setValue","onChange","event","target","name","onSubmit","preventDefault","REGISTER_USER","gql","SurveyForm","props","errors","setErrors","addUser","phone","college","codechef_id","whatsapp","branch","semester","email","useMutation","update","proxy","userData","data","createSurvey","toLowerCase","history","push","onError","err","undefined","graphQLErrors","extensions","exception","error","variables","loading","Segment","inverted","color","Menu","secondary","size","fluid","widths","Item","style","background","alt","src","Grid","Row","centered","Column","width","Form","noValidate","className","Input","label","placeholder","type","maxLength","minLength","Button","Object","keys","length","values","map","Submitted","Join","href","rel","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","logout","LOGIN_USER","Admin","context","useContext","loginUser","username","password","primary","FETCH_USER_DATA","UserData","useQuery","Transition","Group","getSurvey","survey","marginBottom","marginRight","marginTop","Card","Content","Header","Description","id","App","Container","exact","path","component","httpLink","createHttpLink","uri","authLink","setContext","token","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ApolloProvider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a014988.chunk.js","sourcesContent":["import { useState } from 'react'\r\n\r\nexport const useForm = (callback, initialState = {}) =>{\r\n    const [value, setValue] = useState(initialState)\r\n\r\n    const onChange = (event) =>{\r\n        setValue({...value, [event.target.name]: event.target.value})\r\n    }\r\n\r\n    const onSubmit = event =>{\r\n        event.preventDefault()\r\n        callback()\r\n    }\r\n\r\n    return {\r\n        onChange,\r\n        onSubmit,\r\n        value\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport { Form, Button, Grid, Segment, Menu } from 'semantic-ui-react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\nimport { useForm } from '../utils/hooks'\r\n\r\nconst SurveyForm = (props) =>{\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const {onChange, onSubmit, value} = useForm(submitSurvey, {\r\n        name: '',\r\n        phone: '',\r\n        college: '',\r\n        codechef_id: '',\r\n        whatsapp: '',\r\n        branch: '',\r\n        semester: '',\r\n        email: ''\r\n    })\r\n\r\n    const [addUser, {loading}] = useMutation(REGISTER_USER, {\r\n        update(proxy, {data: {createSurvey: userData}}){\r\n            if(userData.college.toLowerCase() === 'bangalore institute of technology' && (userData.branch.toLowerCase() === 'computer science and enginerring' || userData.branch.toLowerCase() === 'cse' || userData.branch.toLowerCase() === 'computer science')){\r\n                props.history.push('/join')\r\n\r\n            }else{\r\n                // console.log(userData.college.toLowerCase())\r\n                props.history.push('/submitted')\r\n            }\r\n        },\r\n        onError(err){\r\n            if (err.graphQLErrors[0] !== undefined)\r\n                setErrors(err.graphQLErrors[0].extensions.exception.errors)\r\n            else{\r\n                setErrors({\r\n                    error: \"Server Error Try Again\"\r\n                })\r\n            }\r\n            // console.log(err.graphQLErrors)\r\n        },\r\n        variables: value\r\n    })\r\n\r\n    function submitSurvey(){\r\n        addUser()\r\n    }\r\n\r\n    return(\r\n        <Segment inverted color=\"teal\">\r\n            <Menu secondary size=\"massive\" fluid widths={3}>\r\n                <Menu.Item>\r\n                    <img style={{background: 'white'}} alt=\"img_3\" src=\"https://firebasestorage.googleapis.com/v0/b/fir-a11e8.appspot.com/o/fb-image-icon.png?alt=media\" />\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                <img alt=\"img\" src='https://firebasestorage.googleapis.com/v0/b/fir-a11e8.appspot.com/o/Untitled%20design.png?alt=media' />\r\n                    <div>SDI CLUB</div>\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                    <img style={{background: 'teal'}} alt=\"img_2\" src=\"https://firebasestorage.googleapis.com/v0/b/fir-a11e8.appspot.com/o/bitlogo.png?alt=media\" />\r\n                </Menu.Item>\r\n            </Menu>\r\n            <Menu secondary size=\"massive\" fluid widths={4}>\r\n                <Menu.Item>\r\n                    \r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                    Competitive Coding Competition\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                    \r\n                </Menu.Item>\r\n            </Menu>\r\n            <Grid>\r\n                <Grid.Row centered >\r\n                    <Grid.Column width={10}>\r\n                        \r\n                    <Form size=\"massive\" onSubmit={onSubmit} noValidate className={loading ? \"loading\": \"\"}>\r\n                        <Form.Input\r\n                            label=\"Name\"\r\n                            placeholder=\"Name\"\r\n                            name=\"name\"\r\n                            type=\"text\"\r\n                            value={value.name}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            label=\"Email\"\r\n                            placeholder=\"Email\"\r\n                            name=\"email\"\r\n                            type=\"text\"\r\n                            value={value.email}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            label=\"Phone\"\r\n                            placeholder=\"Phone\"\r\n                            name=\"phone\"\r\n                            type=\"text\"\r\n                            value={value.phone}\r\n                            onChange={onChange}\r\n                            maxLength=\"10\"\r\n                            minLength=\"10\"\r\n                        />\r\n                        <Form.Input\r\n                            label=\"College\"\r\n                            placeholder=\"College\"\r\n                            name=\"college\"\r\n                            type=\"text\"\r\n                            value={value.college}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            label=\"Codechef Id\"\r\n                            placeholder=\"Codechef Id\"\r\n                            name=\"codechef_id\"\r\n                            type=\"text\"\r\n                            value={value.codechef_id}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            label=\"Whatsapp (If different than phone)\"\r\n                            placeholder=\"Whatsapp\"\r\n                            name=\"whatsapp\"\r\n                            type=\"text\"\r\n                            value={value.whatsapp}\r\n                            onChange={onChange}\r\n                            maxLength=\"10\"\r\n                            minLength=\"10\"\r\n                        />\r\n                        <Form.Input\r\n                            label=\"Branch\"\r\n                            placeholder=\"Branch\"\r\n                            name=\"branch\"\r\n                            type=\"text\"\r\n                            value={value.branch}\r\n                            onChange={onChange}\r\n                        />\r\n                        <Form.Input\r\n                            label=\"Semester\"\r\n                            placeholder=\"Semester\"\r\n                            name=\"semester\"\r\n                            type=\"text\"\r\n                            value={value.semester}\r\n                            onChange={onChange}\r\n                            maxLength=\"1\"\r\n                            minLength=\"1\"\r\n                        />\r\n                        <Button type='submit' color=\"blue\">Submit</Button>\r\n                    </Form>\r\n                    {Object.keys(errors).length > 0 && (\r\n                        <div className=\"ui error message\">\r\n                            <ul className=\"list\">\r\n                                {Object.values(errors).map(value =>(\r\n                                    <li key={value}>{value}</li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                    )}\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nconst REGISTER_USER = gql`\r\n    mutation createSurvey(\r\n        $name: String!\r\n        $phone: String!\r\n        $college: String!\r\n        $codechef_id: String!\r\n        $whatsapp: String\r\n        $branch: String!\r\n        $semester: String!\r\n        $email: String!\r\n    ){\r\n        createSurvey(\r\n            surveyInput:{\r\n                name: $name\r\n                phone: $phone\r\n                college: $college\r\n                codechef_id: $codechef_id\r\n                whatsapp: $whatsapp\r\n                branch: $branch\r\n                semester: $semester\r\n                email: $email\r\n            }\r\n        ){\r\n            id\r\n            college\r\n            branch\r\n        }\r\n    }\r\n`\r\n\r\nexport default SurveyForm;","import React from 'react'\r\nimport { Segment } from 'semantic-ui-react'\r\n\r\nfunction Submitted(){\r\n    return(\r\n        <Segment size=\"massive\" color=\"teal\">\r\n            <h2>\r\n                Registered Successfully. Please pay 20/- using UPI 7597477435 (Akhil) to complete your registration.<br />\r\n                Please send the screenshot on whatsapp 7597477435.<br />\r\n                Thank You.\r\n            </h2>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default Submitted","import React from 'react'\r\nimport { Segment } from 'semantic-ui-react';\r\n\r\nimport Submitted from './Submitted'\r\n\r\nconst Join =() =>{\r\n    return(\r\n        <>\r\n        <Submitted />\r\n        <Segment color=\"teal\">\r\n            <h2>\r\n                To JOIN SDI Club: <br />\r\n                <b>\r\n                <a href=\"https://chat.whatsapp.com/JA8WBVjjHi45dDFw1sDNh6\" target=\"_blank\" rel=\"noopener noreferrer\">Click Here</a></b>\r\n            </h2>\r\n        </Segment>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Join;","import React, {useReducer, createContext} from 'react'\r\nimport jwtDecode from 'jwt-decode'\r\n\r\nconst initialState = {\r\n    user: null\r\n}\r\n\r\nif(localStorage.getItem('jwtToken')){\r\n    const decodedToken = jwtDecode(localStorage.getItem('jwtToken'))\r\n\r\n    if(decodedToken.exp * 1000 < Date.now()){\r\n        localStorage.removeItem('jwtToken')\r\n    } else {\r\n        initialState.user = decodedToken\r\n    }\r\n}\r\n\r\nconst AuthContext = createContext({\r\n    user:null,\r\n    login: (data) => {},\r\n    logout: () => {}\r\n})\r\n\r\nfunction authReducer(state, action){\r\n    switch(action.type){\r\n        case 'LOGIN':\r\n            return{\r\n                ...state,\r\n                user: action.payload\r\n            }\r\n        case 'LOGOUT':\r\n            return {\r\n                ...state,\r\n                user: null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction AuthProvider(props){\r\n    const [state, dispatch] = useReducer(authReducer, initialState)\r\n\r\n    function login(userData){\r\n        localStorage.setItem('jwtToken', userData.token)\r\n        dispatch({\r\n            type: 'LOGIN',\r\n            payload: userData\r\n        })\r\n    }\r\n\r\n    function logout(){\r\n        localStorage.removeItem('jwtToken')\r\n        dispatch({\r\n            type: 'LOGOUT'\r\n        })\r\n    }\r\n\r\n    return  (\r\n        <AuthContext.Provider\r\n            value={{ user: state.user, login, logout }}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nexport { AuthContext, AuthProvider}","import React, { useContext, useState } from 'react'\r\nimport {Button, Form} from 'semantic-ui-react'\r\nimport {useMutation} from '@apollo/react-hooks'\r\nimport gql from 'graphql-tag'\r\n\r\nimport {useForm} from '../utils/hooks'\r\n\r\nimport { AuthContext } from '../context/auth'\r\n\r\nconst Admin = (props)=>{\r\n    const context = useContext(AuthContext)\r\n\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const {onChange, onSubmit, value} = useForm(loginUserCallback,{\r\n        username: '',\r\n        password: ''\r\n    })\r\n\r\n    const [loginUser, {loading}] = useMutation(LOGIN_USER, {\r\n        update(proxy, {data: { login: userData }}){\r\n            // console.log(userData)\r\n            context.login(userData)\r\n            props.history.push('/userdata')\r\n        },\r\n        onError(err){\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors)\r\n        },\r\n        variables: value\r\n    })\r\n\r\n    function loginUserCallback(){\r\n        loginUser()\r\n    }\r\n\r\n    return(\r\n        <div className=\"form-container\">\r\n            <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\": ''}>\r\n                <h1>Login</h1>\r\n                <Form.Input\r\n                    label=\"Username\"\r\n                    placeholder=\"Username\"\r\n                    name=\"username\"\r\n                    type=\"text\"\r\n                    value={value.username}\r\n                    onChange={onChange}\r\n                />\r\n                <Form.Input \r\n                    label=\"Password\"\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    value={value.password}\r\n                    onChange={onChange}\r\n                />\r\n                <Button type=\"submit\" primary>\r\n                    Login\r\n                </Button>\r\n            </Form>\r\n            {Object.keys(errors).length > 0 && (\r\n                <div className=\"ui error message\">\r\n                    <ul className=\"list\">\r\n                        {Object.values(errors).map(value =>(\r\n                            <li key={value}>{value}</li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst LOGIN_USER = gql`\r\n    mutation login(\r\n        $username: String!\r\n        $password: String!\r\n    ){\r\n        login(\r\n                username: $username\r\n                password: $password\r\n        ){\r\n            id email username createdAt token\r\n        }\r\n    }\r\n`\r\n\r\nexport default Admin;","import React from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/client'\r\nimport { Card, Grid, Transition } from 'semantic-ui-react'\r\n\r\nfunction UserData(){\r\n    const { loading, data } = useQuery(FETCH_USER_DATA)\r\n    return(\r\n        <Grid>\r\n            <Grid.Row>\r\n                {\r\n                    loading ? (\r\n                        <h1>Loading Data</h1>\r\n                    ) : (\r\n                        <Transition.Group>\r\n                            {\r\n                                data.getSurvey.length > 0 && data.getSurvey.map(survey => (\r\n                                    <Grid.Row width={14} key={survey.id} style={{marginBottom: 20, marginRight: 20, marginTop: 10}}>\r\n                                        <Card>\r\n                                        <Card.Content>\r\n                                            <Card.Header>{survey.name}</Card.Header>\r\n                                            <Card.Description>\r\n                                                Phone: {survey.phone} <br />\r\n                                                College: {survey.college} <br />\r\n                                                Codechef_id: {survey.codechef_id} <br />\r\n                                                Whatsapp: {survey.whatsapp} <br />\r\n                                                Branch: {survey.branch} <br />\r\n                                                Semester: {survey.semester} <br />\r\n                                                Email: {survey.email} <br />\r\n                                            </Card.Description>\r\n                                        </Card.Content>\r\n                                        </Card>\r\n                                    </Grid.Row>\r\n                                ))\r\n                            }\r\n                        </Transition.Group>\r\n                    )\r\n                }\r\n            </Grid.Row>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst FETCH_USER_DATA = gql`\r\nquery getSurvey{\r\n        getSurvey{\r\n            id\r\n            name\r\n            phone\r\n            college\r\n            codechef_id\r\n            whatsapp\r\n            branch\r\n            semester\r\n            email\r\n        }\r\n    }\r\n`\r\n\r\nexport default UserData","import React from 'react'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { Container } from 'semantic-ui-react'\r\n\r\nimport SurveyForm from './pages/SurveyForm'\r\nimport Join from './pages/Join'\r\nimport Submitted from './pages/Submitted'\r\nimport Admin from './pages/Admin'\r\nimport './App.css'\r\nimport UserData from './components/UserData'\r\n\r\nfunction App(){\r\n    return(\r\n        <Router>\r\n            <Container>\r\n                <Route exact path='/' component={Admin} />\r\n                <Route exact path = '/home' component={SurveyForm} />\r\n                <Route exact path='/join' component={Join} />\r\n                <Route exact path='/submitted' component={Submitted} />\r\n                <Route exact path='/userdata' component={UserData} />\r\n            </Container>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport App from './App'\r\nimport ApolloClient from 'apollo-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { createHttpLink } from 'apollo-link-http'\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport { setContext } from 'apollo-link-context'\r\n\r\nconst httpLink = createHttpLink({\r\n    uri: \"https://sdi-survey.herokuapp.com\" // \"https://sdi-react-app.herokuapp.com\"  // Here Server Address \"http://localhost:5000/\"//\r\n})\r\n\r\nconst authLink = setContext(() =>{\r\n    const token = localStorage.getItem('jwttoken')\r\n\r\n    return{\r\n        headers:{\r\n            Authorization: token ? `Bearer ${token}` : ''\r\n        }\r\n    }\r\n})\r\n\r\nconst client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache()\r\n})\r\n\r\nexport default (\r\n    <ApolloProvider client={client}>\r\n        <App />\r\n    </ApolloProvider>\r\n)","import ReactDOM from 'react-dom';\nimport ApolloProvider from './ApolloProvider'\n\nReactDOM.render(\n  ApolloProvider,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}